// package com.pocketbazaar.api.security;

// import io.jsonwebtoken.Claims;
// import io.jsonwebtoken.Jwts;
// import io.jsonwebtoken.SignatureAlgorithm;
// import org.springframework.beans.factory.annotation.Value;
// import org.springframework.stereotype.Component;

// import java.util.Date;
// import java.util.function.Function;

// @Component
// public class JwtUtil {

//     @Value("${jwt.secret}")
//     private String secretKey;

//     @Value("${jwt.expiration}")
//     private long expirationTime;

//     // Method to generate JWT token
//     public String generateToken(String username) {
//         // You can add more custom claims here as needed
//         return Jwts.builder()
//                 .setSubject(username)
//                 .setIssuedAt(new Date())
//                 .setExpiration(new Date(System.currentTimeMillis() + expirationTime))
//                 .signWith(SignatureAlgorithm.HS256, secretKey)
//                 .compact();
//     }

//     // Extract username from token
//     public String extractUsername(String token) {
//         return extractClaim(token, Claims::getSubject);
//     }

//     // Extract a specific claim (like subject) from the token
//     public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
//         final Claims claims = extractAllClaims(token);
//         return claimsResolver.apply(claims);
//     }

//     // Extract all claims from the token
//     private Claims extractAllClaims(String token) {
//         try {
//             return Jwts.parserBuilder()
//                     .setSigningKey(secretKey)
//                     .build()
//                     .parseClaimsJws(token)
//                     .getBody();
//         } catch (Exception e) {
//             throw new RuntimeException("Invalid or expired token", e);
//         }
//     }

//     // Validate token
//     public boolean isTokenExpired(String token) {
//         return extractExpiration(token).before(new Date());
//     }

//     // Extract expiration date from the token
//     public Date extractExpiration(String token) {
//         return extractClaim(token, Claims::getExpiration);
//     }

//     // Validate token (username matches and not expired)
//     public boolean validateToken(String token, String username) {
//         return (username.equals(extractUsername(token)) && !isTokenExpired(token));
//     }
//     public boolean isTokenValid(String token) {
//         return !isTokenExpired(token);  // Token is valid if it's not expired
//     }
// }



package com.pocketbazaar.api.security;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.Date;
import java.util.function.Function;
import java.security.Key;

@Component
public class JwtUtil {

    @Value("${jwt.secret}")
    private String secretKey;  // This can still be the base64 encoded key, for example.

    @Value("${jwt.expiration}")
    private long expirationTime;

    // Method to generate JWT token
    public String generateToken(String username) {
        // Use the secure secret key generated by the Keys class
        Key key = Keys.secretKeyFor(SignatureAlgorithm.HS256);

        // You can add more custom claims here as needed
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + expirationTime))
                .signWith(key)  // Use the secure key here
                .compact();
    }

    // Extract username from token
    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    // Extract a specific claim (like subject) from the token
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    // Extract all claims from the token
    private Claims extractAllClaims(String token) {
        Key key = Keys.secretKeyFor(SignatureAlgorithm.HS256); // Use secure key here

        try {
            return Jwts.parserBuilder()
                    .setSigningKey(key)  // Use the secure key for parsing
                    .build()
                    .parseClaimsJws(token)
                    .getBody();
        } catch (Exception e) {
            throw new RuntimeException("Invalid or expired token", e);
        }
    }

    // Validate token
    public boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    // Extract expiration date from the token
    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    // Validate token (username matches and not expired)
    public boolean validateToken(String token, String username) {
        return (username.equals(extractUsername(token)) && !isTokenExpired(token));
    }

    public boolean isTokenValid(String token) {
        return !isTokenExpired(token);  // Token is valid if it's not expired
    }
}
